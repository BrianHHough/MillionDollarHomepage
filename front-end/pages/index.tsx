import React, {useState, useEffect} from 'react'
import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import Lottie from "lottie-react";
import cursor1 from "../assets/cursors/mouse-click-pointer-cursor-arrow-sign.json";

import Box from '@mui/material/Box';
import Grid from '@mui/material/Unstable_Grid2';
import Tooltip from '@mui/material/Tooltip';
import { styled } from '@mui/system';

import NFTMetadata from "../data/sampleNFTData.json"



const Home: NextPage = () => {
  const [position, setPosition] = useState({ x: undefined, y: undefined });


  const gridContainer = {
    display: "inline-grid",
    gridTemplateColumns: "repeat(40, 1fr)"
  };
  
  // Variable number of columns
  const gridContainer2 = {
    // display: "grid",
    // gridAutoColumns: "1fr",
    // gridAutoFlow: "column"
  };
  
  const gridItem1 = {
    margin: "2px",
    border: "1px solid darkgrey",
    height: "20px",
    width: "20px",
    // Red X
    cursor: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' fill='red' viewBox='0 0 512 512'%3e%3cg transform='rotate(45 256 256)'%3e%3crect id='r' x='16' y='216' width='480' height='80' rx='14'/%3e%3cuse href='%23r' transform='rotate(90 256 256)'/%3e%3c/g%3e%3c/svg%3e") 16 16, pointer`
    // cursor: `${<Lottie animationData={cursor1} loop={true} />}`
  };


  const gridItem2 = {
    margin: "2px",
    border: "1px solid darkgrey",
    height: "20px",
    width: "20px",
    // Blue X
    cursor: `url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='32' height='32' fill='blue' viewBox='0 0 512 512'%3e%3cg transform='rotate(45 256 256)'%3e%3crect id='r' x='16' y='216' width='480' height='80' rx='14'/%3e%3cuse href='%23r' transform='rotate(90 256 256)'/%3e%3c/g%3e%3c/svg%3e") 16 16, pointer`
    // cursor: `${<Lottie animationData={cursor1} loop={true} />}`
  };

  const StyledTooltip = styled(Tooltip)({
    tooltipPlacementTop: {
      margin: "4px 0",
      transform: "scale(2)"
    },
  });

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <StyledTooltip 
              title="Delete" 
              followCursor
            >
          <h1 className={styles.title}>
            Welcome to MillionDollarHomepage
          </h1>
        </StyledTooltip>
        <div>
        {/* <Box sx={{ flexGrow: 2, p: 2 }}>
          <Grid
            container
            spacing={3}
            sx={{
              '--Grid-borderWidth': '1px',
              borderTop: 'var(--Grid-borderWidth) solid',
              borderLeft: 'var(--Grid-borderWidth) solid',
              borderColor: 'white',
              '& > div': {
                borderRight: 'var(--Grid-borderWidth) solid',
                borderBottom: 'var(--Grid-borderWidth) solid',
                borderColor: 'white',
              },
            }}
          >
            {[...Array(100)].map((_, index) => (
              <Grid 
                key={index} {...{ xs: 1, sm: 1, md: 1, lg: 1 }} 
                minHeight={20}
              />
            ))}
          </Grid>
        </Box> */}

        <hr></hr>


      <div style={{
        transform: "translateX(-50%) scale(1)",
        position: "absolute",
        left: "50%",
      }}>
        <div style={{
          display: "inline-grid",
          gridTemplateColumns: "repeat(100, 1fr)",
          }}
          >
        {[...Array(300)].map((_, index) => (
          <>
            {Object.keys(NFTMetadata).map((item, index) => {
                return (
                    <>
                    <Tooltip 
                      key={index}
                      title={NFTMetadata[index].description} 
                      // followCursor
                       // @ts-ignore
                      onMouseMove={e => setPosition({ x: e.pageX, y: e.pageY })}
                      // PopperProps={{
                      //   anchorEl: {
                      //     clientHeight: 0,
                      //     clientWidth: 0,
                      //     getBoundingClientRect: () => ({
                      //       // @ts-ignore
                      //       top: position.y,
                      //       // @ts-ignore
                      //       left: position.x * 0.99,
                      //       // @ts-ignore
                      //       right: position.x * 2,
                      //       // @ts-ignore
                      //       bottom: position.y,
                      //       width: 0,
                      //       height: 0,
                      //     })
                      //   }
                      // }}
                    >
                    <div 
                      key={index}
                      style={{
                        // border: "1px solid white",
                        height: "10px",
                        width: "10px",
                        backgroundImage: `url("${NFTMetadata[index].backgroundImage}")`,
                        backgroundRepeat: "round",
                        cursor: `${NFTMetadata[index].cursor}`,
                        scale: "trans"
                      }}
                    >
                    </div>
                  </Tooltip>
                  </>
                )})
            }
          </>
        ))}
        </div>
      </div>

        <hr></hr>

        <Box sx={gridContainer}>
          {[...Array(100)].map((_, index) => (
            <>
            <Tooltip 
              title="Testing"
              // followCursor
              // @ts-ignore
              onMouseMove={e => setPosition({ x: e.pageX, y: e.pageY })}
              PopperProps={{
                anchorEl: {
                  clientHeight: 0,
                  clientWidth: 0,
                  getBoundingClientRect: () => ({
                     // @ts-ignore
                    top: position.y * 1.1,
                    // @ts-ignore
                    left: position.x * 1.28,
                    // @ts-ignore
                    right: position.x * 2,
                    // @ts-ignore
                    bottom: position.y,
                    width: 0,
                    height: 0,
                  })
                }
              }}
            >
              <Box key={index} sx={gridItem1}/>
            </Tooltip>
            {/* <Box key={index} sx={gridItem2}/> */}
            </>
          ))}
        </Box>

        </div>
      </main>

      

        

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home
